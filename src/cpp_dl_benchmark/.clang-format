# clang-format configuration file
# Required version: clang-format-16

IndentWidth: 4
UseTab: Never
ColumnLimit: 120

Language: Cpp
Standard: c++17

# alignment
AccessModifierOffset: -4
AlignAfterOpenBracket: Align
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
AlignConsecutiveMacros: true
AlignTrailingComments: false
AllowAllArgumentsOnNextLine: false
AllowAllConstructorInitializersOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false
AllowShortBlocksOnASingleLine: Empty
AllowShortFunctionsOnASingleLine: Empty
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: Empty
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
AllowShortEnumsOnASingleLine: false
BinPackArguments: false
BinPackParameters: false
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeColon
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel:  false
  AfterClass: false
  AfterControlStatement: Never
  AfterEnum: false
  AfterExternBlock: false
  AfterFunction: false
  AfterNamespace: false
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  BeforeCatch: false
  BeforeElse: true
  BeforeWhile: false
  BeforeLambdaBody: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
CommentPragmas: '^#'
ContinuationIndentWidth: 4
Cpp11BracedListStyle: true
DerivePointerAlignment: false
EmptyLineBeforeAccessModifier: LogicalBlock
FixNamespaceComments: true
IndentAccessModifiers: false
IndentCaseLabels: true
IndentPPDirectives: None
PenaltyReturnTypeOnItsOwnLine: 1000000
KeepEmptyLinesAtTheStartOfBlocks: false
LambdaBodyIndentation: OuterScope
NamespaceIndentation: None
PackConstructorInitializers: BinPack
PointerAlignment: Left  # int*
ReferenceAlignment: Left  # int&

# misc
ShortNamespaceLines: 1
SeparateDefinitionBlocks: Leave
ReflowComments:  true

# includes ordering
IncludeBlocks: Regroup
IncludeCategories:
  # Current project headers
  - Regex:           '"([A-Za-z0-9.\/-_])+"'
    Priority:        1
  # OMZ headers
  - Regex:           '<(utils|monitors)\/([A-Za-z0-9.\/-_])+>'
    Priority:        2
  # 3rd party headers with extension
  - Regex:           '<onnxruntime*.h>'
    Priority:        3
  - Regex:           '<(gflags|nlohmann|opencv2|tensorflow|torch|torch_tensorrt)\/([A-Za-z0-9.\/-_])+>'
    Priority:        3
  # C system headers with extension
  - Regex:           '<([A-Za-z0-9.\/-_])+\.h>'
    Priority:        4
  # C++ standard library headers without extension
  - Regex:           '<([A-Za-z0-9\/-_])+>'
    Priority:        5
SortIncludes: CaseInsensitive
SortUsingDeclarations: Lexicographic

# spaces control section
SpaceAfterCStyleCast: false # (int)i
SpaceAfterLogicalNot: false # !someExpression()
SpaceAfterTemplateKeyword: false #  template<int> void foo();
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros: true
  AfterOverloadedOperator: false
  AfterRequiresInClause: false
  AfterRequiresInExpression: false
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: true # for (auto v : values) {}
SpacesBeforeTrailingComments: 2 #  //  Comment
SpaceBeforeSquareBrackets: false # x[0]
SpacesInCStyleCastParentheses: false # x = (int32)y
SpacesInConditionalStatement: false # if (a)
SpacesInContainerLiterals: false # arr = [1, 2, 3];
SpaceInEmptyBlock: false # {}
SpaceInEmptyParentheses: false # ()
SpacesInLineCommentPrefix: # How many spaces are allowed at the start of a line comment.
  Minimum:         1
  Maximum:         -1
SpacesInParentheses: false # (x==1)
SpacesInSquareBrackets: false # [0]
